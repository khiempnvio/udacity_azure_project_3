name: Azure Pipelines

# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml
trigger:
- main

pool: myAgentPool

variables:
  python.version: '3.9'
  # ToDo: Replace the service connection name as used in the DevOps project settings
  azureServiceConnectionId: 'myServiceConnection'
  # Project root folder. Point to the folder containing manage.py file.
  projectRoot: $(System.DefaultWorkingDirectory)
  # Environment name
  environmentName: 'env-vm-project3'
  appName: 'khiempn-udacity-1'
stages:
#--------------------------------------------#  
# BUILD STAGE
#--------------------------------------------#    
- stage: Build
  jobs:
  - job: BuildInfrastructure
    steps:
    - script: |
        sed -i 's/CLIENT_SECRET_KEY/$(client_secret)/g' $(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars
        cat $(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars
      displayName: 'Update client key'

    - script: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
      displayName: 'Install Azure CLI'

    - task: AzureCLI@2
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: 'bash'
        scriptLocation: 'inlineScript'
        inlineScript: |
          az login --service-principal -u $(client_id) -p $(client_secret) --tenant $(tenant_id)

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
    #   displayName: 'Terrafom installation'
    #   inputs:
    #     terraformVersion: 'latest'
  
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: 'Terrafom init'
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'init'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     backendServiceArm: '$(azureServiceConnectionId)'
    #     backendAzureRmResourceGroupName: 'Azuredevops'
    #     backendAzureRmStorageAccountName: 'tfstate101034353'
    #     backendAzureRmContainerName: 'tfstate'
    #     backendAzureRmKey: 'key1'
    #   env:
    #     ARM_ACCESS_KEY: $(storage_access_key)

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform validate
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'validate'
    #   env:
    #     ARM_ACCESS_KEY: $(storage_access_key)

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      # displayName: Terraform plan
      # inputs:
      #   provider: 'azurerm'
      #   command: 'plan'
      #   workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
      #   environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
      # env:
      #   ARM_ACCESS_KEY: $(storage_access_key)
    # OPTIONAL - This step is needed only if your Terraform VM uses an SSH key pair for login and you want your pipeline agent to connect to it. 
    # Generate an SSH key pair in your local/AZ Cloud shell. Use the public key in the Terraform VM module. 
    # Install public key and private key file to the pipeline agent, using the task below. 
    # ToDo: Change the inputs value below
    # - task: InstallSSHKey@0
    #   inputs:
    #     knownHostsEntry: 'KNOWN_HOSTS_STRING' # variable value
    #     sshPublicKey: 'PUBLIC_KEY'            # variable value
    #     sshKeySecureFile: 'id_rsa' # Use secure file feature in the pipeline library UI to save the "id_rsa" file, as mentioned here: https://learn.microsoft.com/en-us/azure/devops/pipelines/library/secure-files?view=azure-devops#add-a-secure-file
    
    # - task: DownloadSecureFile@1
    #  name: udacity_public_key
    #  displayName: 
    #  inputs:
    #   secureFile: 
    
    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform apply
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'apply'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #   env:
    #     ARM_ACCESS_KEY: $(storage_access_key)

    - script: |
        python -m venv appenv
        source antenv/bin/activate
        sudo apt-get update
        sudo apt-get -y install make
        sudo apt-get -y install zip
        sudo apt-get -y install python3-pip

        cd fakerestapi
        make install
      workingDirectory: $(projectRoot)
      displayName: 'Step install dependences'

    - script: |
        make lint
        export FLASK_APP=app.py
      workingDirectory: $(projectRoot)
      displayName: 'Step verify code and export FLASK_APP'

    - task: ArchiveFiles@2
      displayName: 'Step archive files'
      inputs:
        rootFolderOrFile: '$(projectRoot)'
        includeRootFolder: false
        archiveType: zip
        archiveFile: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
        replaceExistingArchive: true

    - upload: $(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip
      displayName: 'Step upload package'
      artifact: drop-fakerestapi

    # - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
    #   displayName: Terraform destroy
    #   inputs:
    #     provider: 'azurerm'
    #     command: 'destroy'
    #     workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
    #     environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
    #   env:
    #     ARM_ACCESS_KEY: $(storage_access_key)

- stage: Deploy
  displayName: 'Deploy Web App'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App '
            inputs:
              azureSubscription: $(azureServiceConnectionId)
              appName: $(webAppName)
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId).zip


#--------------------------------------------#    
    # Postman - Install Newman    
    # - job: Postman_Install_Newman  
    #   steps: 
    #     - task: NodeTool@0
    #       displayName: 'Install Node.js'
    #       inputs:
    #         versionSpec: '16.x'
    #         checkLatest: true
    #     - script: |
    #         npm install -g newman
    #       displayName: 'Install Newman'
    #     - script: |
    #         newman run automatedtesting/postman/StarterAPIs.json --reporters cli,junit --reporter-junit-export Results/RegressionTests.xml --suppress-exit-code
    #       displayName: 'Run Data Validation Tests'
    #     - script: |
    #         newman run TestSuite.Regression.json -e Test.environment.json --reporters cli,junit --reporter-junit-export TEST-Regression.xml
    #       displayName: ' Run Regression Tests'
          
    #     - task: PublishTestResults@2
    #       displayName: Publish report postman
    #       condition: always()
    #       inputs:
    #         testResultsFormat: JUnit
    #         testResultsFiles: '$(System.DefaultWorkingDirectory)/Results/*.xml'

 #--------------------------------------------#
    # Selenium (UI) Test Suite - Archive the package  
    # - job: Archive_Selenium_Test_Suite 
    #   steps: 
    #     - task: ArchiveFiles@2
    #       displayName: 'Archive UI Tests'
    #       inputs:
    #           rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
    #           includeRootFolder: false
    #           archiveType: 'zip'
    #           archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    #     - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip   # Same as the archiveFile artifact above. 
    #       displayName: 'Upload Package'
    #       artifact: drop-uitests
  #--------------------------------------------#    
  